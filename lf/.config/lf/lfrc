# KEYS ========================================================================

# default ---------------------------------------------------------------------
# cmd open &$OPENER "$f"
map e $$EDITOR "$f"
map i $$PAGER "$f"
map w $$SHELL

map zh set hidden!
map zr set reverse!
map zn set info
map zs set info size
map zt set info time
map za set info size:time

map sn :set sortby natural; set info
map ss :set sortby size; set info size
map st :set sortby time; set info time
map sa :set sortby atime; set info atime
map sc :set sortby ctime; set info ctime
map se :set sortby ext; set info

map gh cd ~
# map <space> :toggle; down
# ---

# custom ----------------------------------------------------------------------
map <right>
map f
map D trash
map <c-n> page-down
map <c-p> page-up

map <esc> quit

map <space> :toggle
map , ${{
	$EDITOR ~/.config/lf/lfrc && \
	lf -remote "send $id :source ~/.config/lf/lfrc" && \
	lf -remote "send $id echo Updated!"
}}
map . set hidden!
map o $$EDITOR "$f"
map O ${{ open "$f" }}

# Action ...
map ag :$g
# map agpu !git pull
# map agp !git push -u origin head
map al $tig
map aal $tig --all
map as !{{clear; git status --short --branch}}
map ac push :create<space>
cmd create ${{
	for i in "$@"; do
		[ "${i: -1}" = "/" ] && {
			mkdir -p -- "$i"
		} || {
			touch "$i"
		}
	done

	lf -remote "send $id select \"${1%%/*}\""
}}

# Go to ...
map gh cd ~
map gp cd ~/Projects
map gw cd ~/Projects/creditornot
map gi cd ~/Projects/ifkit
map gd cd ~/Downloads
map g. &{{ lf -remote "send $id cd ~/.dotfiles" && lf -remote "send $id set hidden" }}
map gG &{{ lf -remote "send $id cd \"$(brew --prefix)/Cellar/go\"" }}
map gr &{{ root=$(git rev-parse --show-toplevel 2>/dev/null); [[ -n "$root" ]] && lf -remote "send $id cd \"$root\"" || true }}

# CTRL-O and CTRL-I
map <tab> jump-next
map <c-o> jump-prev

map E edit-directory
map <c-e> edit-directory

map fd find-directory
map ff find-file
map fg find-grep
map fp find-project
map <c-k> find-project

# COMMANDS ====================================================================
cmd open

cmd trash %{{
	printf " Move to trash? [y/n]: "
	read -n 1 ans
	[ "$ans" = "y" ] && [ -n "$fx" ] && echo "$fx" | while read -r f; do
		trash "$f"
	done
	echo
}}

cmd edit-directory ${{
	a="$PWD/venv/bin/activate"
	lf -remote "send $id cd $PWD"
	if [[ -e "$a" ]]; then
		source "$a"
	fi
	cd "$PWD" && $EDITOR
	lf -remote "send $id reload"
}}

cmd mkdir %{{
	IFS=" "
	mkdir -p -- "$*"
	lf -remote "send $id select \"$*\""
}}

cmd find-file ${{
	res=$(cd "$PWD" && fd --relative-path --hidden -E '.git' '' | fzf --reverse)
	[ $? -ne 0 ] && exit 0
	cmd="select"
	[ -d "$res" ] && cmd="cd"
	lf -remote "send $id select \"$res\""
}}

cmd find-directory ${{
	dir=$(cd "$PWD" && fd --relative-path --hidden -t d -E '.git' '' | fzf --reverse)
	[ $? -eq 0 ] && lf -remote "send $id cd \"$dir\"" || exit 0
}}

cmd find-project ${{
	dir=$(fd -d 2 -t d '' ~/Projects | fzf --reverse)
	[ $? -eq 0 ] && lf -remote "send $id cd \"$dir\"" || exit 0
}}

cmd find-grep ${{
	# https://github.com/gokcehan/lf/wiki/Integrations#ripgrep
	# https://github.com/junegunn/fzf/blob/master/ADVANCED.md#using-fzf-as-interative-ripgrep-launcher
	res="$( \
		RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case --hidden"
		FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
		fzf --bind "change:reload:$RG_PREFIX {q} || true" --ansi --layout=reverse | cut -d':' -f1,2
	)"
	[ $? -ne 0 ] && exit 0
	# [ ! -z "$res" ] && lf -remote "send $id select \"$res\"" || exit 0
	[ ! -z "$res" ] && nvim "${res%%:*}" -c "${res##*:}" || exit 0
}}

# cmd on-cd ${{
# 	[ $TERM_PROGRAM = "iTerm.app" ] && printf "\033]0;$(basename $PWD)\007"; true
# }}

# OPTIONS =====================================================================
# set icons true
# set color256
set autoquit true
#set hidden
# set ratios 2:3:8
set ratios 3:8
# set sortby ext
# set promptfmt "\033[36;1m%d\033[0m\033[1m%f\033[0m"
# set promptfmt "\033[32;1m%u@%h\033[0m:\033[34;1m%d\033[0m\033[1m%f\033[0m"
set promptfmt "\033[36;1m%d\033[0m"
set previewer ~/.config/lf/preview.sh
set cursorpreviewfmt ""
