" My Help {{{
"
" NAVIGATION & WINDOWS & COMMANDS
" C-hjkl- move to window            // C-wC-h...
" L-hjkl- move to window
" L-v   - PARTIAL mappting to ^w

" L-L   - previous buffer           // C-^
" L-/   - clear search highlight    // :noh
" L-;   - command line              // :
" jj    - ESC insert / command      // <C-c>

" L-oo  - "Only One maximized"      // :MaximizerToggle!
" L-oO  - "Only One window"         // :only

" L-qq  - "Quit window"             // :quit
" L-qw  - "Quit and Write"          // :wq
" L-qb  - "Quit Buffer"             // :bdelete
" L-qc  - "Quit c quickfix"         // :cclose
" L-ql  - "Quit l location list"    // :lclose
" L-qp  - "Quit p preview window"   // :pclose
" L-qa  - "Quit All"                // :qall
" L-qe  - "Quit & Exit w/o save"    // :qall!

" L-c   - "c Quickfix toggle"
" L-n   - "n locatioN list toggle"
"
" VIM & VIEW
" L-ve  - "Vim Edit vimrc"          // :edit $MYVIMRC
" L-vr  - "Vim Runtime vimrc"       // :source $MYVIMRC
" L-vi  - "Vim Install plugins"     // :PlugInstall
" L-vu  - "Vim Update plugins"      // :PlugUpdate
"
" L-vb  - "View Blame"              // :Gblame
" L-vd  - "View Diff split"         // :Gdiffsplit
" L-vD  - "View Difftool"           // :Git difftool
" L-vg  - "View Git window"         // :Git

" OPTIONS TOGGLES
" L-os  - "Option Spell"            // :setlocal spell!
" L-or  - "Option Relative numbers" // :setlocal relativenumber!
" L-ol  - "Option List mode"        // :setlocal list!
" L-ow  - "Option Wrap"             // :setlocal nowrap!
" L-oc  - "Option ColorColumns"     // ToggleColorColumn()
" L-oz  - "Option Zen mode"         // :Goyo
" L-of  - "Option Focus mode"       // :Limelight!!

" EDIT
" L-w   - "Write"                   // :write
" Enter - repeat last macro
"
" K     - "K-Up move selected"      // :visual
" J     - "J-Down move selected"    // :visual
" L-es  - "Edit Spelling mistake"
" L-er  - "Edit Rename"             // <plug>(lsp-rename)
" TODO: finish
" L-ee  - "Edit symbol / selection" // Search next: n/N. Repeat: .
" L-eE  - "Edit symbol / selection" // Substitute
"
" FIND
" L-ff  - "Find File"               // :FZF
" L-fd  - "Find Directory"          // :Fern
" L-fs  - "Find Symbol"             // :Vista
" L-fc  - "Find symbol under Cursor"// CtrlSF

" }}}

" Based on
" https://raw.githubusercontent.com/nickjj/dotfiles/master/.vimrc
" https://github.com/wincent/wincent/tree/aa3a322e3a911dabe0ef398ebb1fd7c77209b8ac/roles/dotfiles/files/.vim
" ./vimrc-lightline.vim

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  source $MYVIMRC | PlugInstall --sync
  " autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif


" Plugins
" ---------------------

" Specify a directory for plugins.
call plug#begin('~/.vim/plugged')

" Color theme.
Plug 'habamax/vim-gruvbit'
" Plug 'rakr/vim-one'
" Color theme for lightline.
" Plug 'ajmwagar/vim-deus'

" Plug 'junegunn/seoul256.vim'
" Plug 'morhetz/gruvbox'
" Plug 'noahfrederick/vim-noctu'
" Plug 'humanoid-colors/vim-humanoid-colorscheme'

" Jump to any location specified by two characters.
Plug 'justinmk/vim-sneak'

" Integrate fzf with Vim.
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Search and edit tool.
Plug 'dyng/ctrlsf.vim'

" Expand current window.
Plug 'szw/vim-maximizer'

" Resize & move windows.
let g:winresizer_start_key = '<Leader>vV'
Plug 'simeji/winresizer'

" Navigate and manipulate files in a tree view.
let g:fern#disable_viewer_spinner = 1
Plug 'lambdalisue/fern.vim'
Plug 'lambdalisue/fern-git-status.vim'
Plug 'yuki-yano/fern-preview.vim'

" Modify * to also work with visual selections.
Plug 'nelstrom/vim-visual-star-search'

" Automatically clear search highlights after you move your cursor.
" Plug 'haya14busa/is.vim'

" Toggle comments in various ways.
Plug 'tpope/vim-commentary'

" Surround operations.
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'

" Git UI.
Plug 'tpope/vim-fugitive'
" GBrowse for github.
Plug 'tpope/vim-rhubarb'
" :{range}GBrowse for bitbucket.
if !exists('fubitive_loaded')
Plug 'tommcdo/vim-fubitive'
let fubitive_loaded = v:true
endif

" Show git file changes in the gutter.
" Plug 'mhinz/vim-signify'
Plug 'airblade/vim-gitgutter'

" Run test suites for various languages.
Plug 'janko/vim-test'

" Build and test dispatcher.
Plug 'tpope/vim-dispatch'

" Golang extended support
Plug 'fatih/vim-go'

" GoTests generator: go get -u github.com/cweill/gotests/...
Plug 'buoto/gotests-vim'

" Toggle functions for quickfix and location list.
Plug 'milkypostman/vim-togglelist'

" Editable quickfix and locaion list.
" Plug 'itchyny/vim-qfedit'

" LSP & Autocomplete
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
" Document inspector.
Plug 'liuchengxu/vista.vim'

" Linting.
" Plug 'vim-syntastic/syntastic'

" Debug Adapter Protocol for vim (.dotfiles/vim/.vim/vimspector-config/).
Plug 'puremourning/vimspector'

" (zen mode) Distraction-free writing in Vim.
Plug 'junegunn/goyo.vim'
" (focus mode) Dim paragraphs above and below the active paragraph.
Plug 'junegunn/limelight.vim'

" Status line.
Plug 'itchyny/lightline.vim'
Plug 'mengelbrecht/lightline-bufferline'

" Snippets.
if has('python3')
    " The best snippets plugin.
    Plug 'SirVer/ultisnips'
    " Snippets set: common.
    Plug 'honza/vim-snippets'
    " Golang snippets: ife*.
    Plug 'nametake/vim-goiferr-snippets', {'for': 'go'}
    " Asyncomplete integration.
    Plug 'prabirshrestha/asyncomplete-ultisnips.vim'
endif

Plug 'flazz/vim-colorschemes'
Plug 'xolox/vim-misc'
Plug 'xolox/vim-colorscheme-switcher'

Plug 'justinmk/vim-dirvish'

call plug#end()



" Basic functions

if exists('*vista#RunForNearestMethodOrFunction')
function! NearestMethodOrFunction() abort
  return get(b:, 'vista_nearest_method_or_function', '')
endfunction
autocmd VimEnter * call vista#RunForNearestMethodOrFunction()
endif

let g:fubitive_domain_pattern = 'stash\.msk\.avito\.ru'

" Encrease foldcolumn for the only window in a row.
function! ChangeFoldColumn() abort
        if winnr('h') == winnr() && winnr('l') == winnr() | setlocal foldcolumn=12 | else | setlocal foldcolumn=0 | endif
endfunction

" autocmd VimEnter,WinEnter,WinLeave,WinNew,BufWinEnter,TerminalWinOpen * call ChangeFoldColumn() | " WinLeave,
if !has('nvim')
        autocmd VimEnter,WinEnter,WinLeave,WinNew,BufWinEnter * call ChangeFoldColumn() | " WinLeave,
endif
        
"  Color settings
" ---------------------

" non-beak-space
set fillchars+=vert:Â 
" highlight VertSplit cterm=NONE ctermfg=Green ctermbg=NONE guibg=#000000 guifg=#000000
hi VertSplit gui=reverse

" Enable 24-bit true colors if your terminal supports it.
if (has("termguicolors"))
  set termguicolors
endif

" Enable syntax highlighting.
" syntax on
syntax on

" function! s:patch_humanoid_colors()
"         highlight cursorline ctermbg=White guibg=White
"         highlight cursorlinenr cterm=none gui=none
"         highlight label cterm=none gui=none
"         highlight function cterm=bold gui=bold ctermfg=16 guifg=#010000
"         highlight operator cterm=none gui=none ctermfg=16 guifg=#010000
"         highlight string ctermfg=29 guifg=#00875f
"         highlight keyword ctermfg=25 guifg=#005faf
"         highlight number ctermfg=124 guifg=#af0000
"         highlight float ctermfg=124 guifg=#af0000
"         highlight boolean ctermfg=32 guifg=#0087d7
"         highlight type ctermfg=131 guifg=#af5f5f

"         highlight link conditional label
"         highlight link goConditional label

"         highlight goTypeName ctermfg=168 guifg=#d75f5f

"         " Spelling mistakes will be colored up red.
"         highlight SpellBad cterm=underline ctermfg=203 guifg=#ff5f5f
"         highlight SpellLocal cterm=underline ctermfg=203 guifg=#ff5f5f
"         highlight SpellRare cterm=underline ctermfg=203 guifg=#ff5f5f
"         highlight SpellCap cterm=underline ctermfg=203 guifg=#ff5f5f

"         " lsp
"         highlight lspReference ctermbg=Yellow guibg=Yellow
" endfunction
" autocmd! ColorScheme humanoid call s:patch_humanoid_colors()

" function! s:patch_gruvbox_colors()
"         " Spelling mistakes will be colored up red.
"         highlight SpellBad cterm=underline ctermfg=203 guifg=#ff5f5f
"         highlight SpellLocal cterm=underline ctermfg=203 guifg=#ff5f5f
"         highlight SpellRare cterm=underline ctermfg=203 guifg=#ff5f5f
"         highlight SpellCap cterm=underline ctermfg=203 guifg=#ff5f5f
         
"         highlight lspReference ctermbg=241 guibg=#665c54
" endfunction
" autocmd! ColorScheme gruvbox call s:patch_gruvbox_colors()

function! s:patch_gruvbit_colors()
        highlight clear VertSplit
        " Syntax
        highlight Function cterm=bold gui=bold guifg=#83a598 ctermfg=109
        " highlight goField cterm=none gui=none guifg=#bdae93 ctermfg=248
        highlight goField cterm=none gui=none guifg=#B2B2B2 ctermfg=247
        " highlight goField cterm=none gui=none guifg=#D7875F ctermfg=273
        highlight clear MatchParen
        highlight MatchParen cterm=bold guibg=#AF5F00 ctermbg=130

        " lsp
        " highlight lspReference ctermfg=229 guifg=#FFFFAF ctermbg=23 guibg=#005F5F
        " highlight lspReference ctermfg=229 guifg=#FFFFAF ctermbg=22 guibg=#005F00
        " highlight lspReference ctermfg=229 guifg=#FFFFAF ctermbg=22 guibg=#004F00
        highlight lspReference ctermfg=229 guifg=#FFFFAF ctermbg=19 guibg=#0000AF

        " Selection
        highlight Visual ctermbg=128 guibg=#AF00D7 ctermfg=253 guifg=#DADADA
        highlight Search ctermbg=90 guibg=#870087 ctermfg=253 guifg=#DADADA
        highlight IncSearch ctermbg=163 guibg=#D700AF ctermfg=253 guifg=#DADADA

        " Spelling mistakes will be colored up red.
        highlight SpellBad cterm=underline ctermfg=203 guifg=#ff5f5f
        highlight SpellLocal cterm=underline ctermfg=203 guifg=#ff5f5f
        highlight SpellRare cterm=underline ctermfg=203 guifg=#ff5f5f
        highlight SpellCap cterm=underline ctermfg=203 guifg=#ff5f5f

        highlight DiffAdd cterm=bold ctermfg=121 gui=bold guifg=#8ec07c
        highlight DiffDelete cterm=bold ctermfg=203 gui=bold guifg=#ff5f5f
endfunction
autocmd! ColorScheme gruvbit call s:patch_gruvbit_colors()

" set background=light
let g:gruvbit_transp_bg = v:true
let g:limelight_conceal_termfg = 238
let g:limelight_conceal_guifg = '#444444'
let g:seoul256_background = 234
let g:deus_termcolors=256
try
    set background=dark
    colorscheme gruvbit
    " set background=light
    " colorscheme one
catch
    echo ""
endtry

" Basic Options
" ---------------------

" set mouse=a
" set colorcolumn=80

" set langmap=Ð¤ÐÐ¡ÐÐ£ÐÐÐ Ð¨ÐÐÐÐ¬Ð¢Ð©ÐÐÐÐ«ÐÐÐÐ¦Ð§ÐÐ¯;ABCDEFGHIJKLMNOPQRSTUVWXYZ,ÑÐ¸ÑÐ²ÑÐ°Ð¿ÑÑÐ¾Ð»Ð´ÑÑÑÐ·Ð¹ÐºÑÐµÐ³Ð¼ÑÑÐ½Ñ;abcdefghijklmnopqrstuvwxyz
set keymap=russian-jcukenmac
set iminsert=0
set imsearch=0
imap <C-l> <C-^>
cmap <C-l> <C-^>
" nnoremap <C-l> <C-^>

" Cursor color. 
highlight Cursor guifg=NONE guibg=Green
highlight lCursor guifg=NONE guibg=Cyan
if $TERM_PROGRAM == "iTerm.app"
        " According to deus colorscheme of lightline.
        let s:cursor_normal_color = "a6d684"
        let s:cursor_insert_color = "61afef"

        let &t_SI = "\<Esc>]Pl" . s:cursor_insert_color . "\x7"
        let &t_EI = "\<Esc>]Pl" . s:cursor_normal_color. "\x7"
endif


let mapleader=" "
let maplocalleader=" "

" set lazyredraw
set numberwidth=4
set nopaste
if !has('nvim')
  set noesckeys
end
set updatetime=100
set autoindent
set autoread
set backspace=indent,eol,start
set backupdir=/tmp//,.
set clipboard=unnamed
" set complete+=kspell
" set completeopt=menuone,longest
set completeopt=menuone,noinsert,noselect,preview
" set cursorline
set directory=/tmp//,.
set encoding=utf-8
set expandtab smarttab
set formatoptions=tcqrn1
set hidden
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set matchpairs+=<:> " Use % to jump between pairs
set mmp=5000
set modelines=2
set mouse=n
if !has('nvim')
  if has("mouse_sgr")
      set ttymouse=sgr
  else
      set ttymouse=xterm2
  end
end
set nocompatible
set noerrorbells visualbell t_vb=
set noshiftround
set nostartofline
set noswapfile
" set number relativenumber
" set number
set regexpengine=1
set ruler
set scrolloff=2
set shiftwidth=8
set shortmess+=c
set showcmd
" set showmatch
set showmode
set smartcase
set softtabstop=4
set nospell
set spelllang=en_us,ru_yo
set splitbelow
set splitright
set tabstop=8
set textwidth=0
set timeout
set timeoutlen=2000
set ttimeoutlen=10
set ttyfast
set undodir=/tmp
set undofile
set virtualedit=block
set whichwrap=b,s,<,>
set wildmenu
set wildmode=full
set nowrap
" set listchars=tab:â¹\ ,space:â,eol:Â¬
set listchars=tab:\ \ ,space:\ ,eol:\ 
" set nolist
set list
set nojoinspaces

" Basic mappings
" ---------------------

" nnoremap <Leader>w :write<cr>
nnoremap <Leader>s :write<cr>
nnoremap <Leader>S :wall<cr>

" Partial mapping L-v to CTRL-w
nnoremap <Leader>w <C-w>

" Command line.
nnoremap <Leader>; :
" Repeat last command line.
nnoremap <Leader>' @:

" Keep cursor on the same position. :h `^
inoremap <silent> <Esc> <Esc>`^

" Exit from insert and command mode.
" cnoremap jj <C-c>
" inoremap jj <C-c>
" inoremap Ð¾Ð¾ <C-c>

" Seamlessly treat visual lines as actual lines when moving around.

noremap <silent> j gj
noremap <silent> k gk
noremap <silent> <Down> gj
noremap <silent> <Up> gk
inoremap <silent> <Down> <C-o>gj
inoremap <silent> <Up> <C-o>gk

" Navigate around splits with a single key combo.
" nnoremap <C-l> <C-w><C-l>
" nnoremap <C-h> <C-w><C-h>
" nnoremap <C-k> <C-w><C-k>
" nnoremap <C-j> <C-w><C-j>

nnoremap <Leader>l <C-w><C-l>
nnoremap <Leader>h <C-w><C-h>
nnoremap <Leader>k <C-w><C-k>
nnoremap <Leader>j <C-w><C-j>

tnoremap <C-l> <C-w><C-l>
tnoremap <C-h> <C-w><C-h>
tnoremap <C-k> <C-w><C-k>
tnoremap <C-j> <C-w><C-j>

" scroll by one line
noremap <ScrollWheelUp>   <C-Y>
noremap <ScrollWheelDown> <C-E>

nnoremap <silent> <Leader>oO :only<CR>
nnoremap <silent> <Leader>oo :MaximizerToggle<CR>

" Quit commands.
" nkey('<leader><leader>q', ':qall<cr>', N)
" nkey('<leader><leader>Q', ':qall!<cr>', N)

" nkey('<esc><esc>', ':quit<cr>', N)

" nkey('<leader><esc>', ':bdelete<cr>', N)
" nkey('<leader><leader><esc>', ':bdelete!<cr>', N)
nnoremap <silent> <Leader>q :qall<CR>
nnoremap <silent> <Leader>Q :qall!<CR>

nnoremap <silent> <Leader><Esc> :quit<CR>

" nnoremap <silent> <Leader><Esc>b :bdelete<CR>
" nnoremap <silent> <Leader><Esc>B :bdelete!<CR>

" nnoremap <silent> <Leader>qw :wq<CR>
" nnoremap <silent> <Leader>qb :bdelete<CR>
" nnoremap <silent> <Leader>qB :bdelete!<CR>
" nnoremap <silent> <Leader>qa :qall<CR>
" nnoremap <silent> <Leader>qA :qall!<CR>

" Write buffer.
" nnoremap <Leader>w :write<cr>
" nnoremap <Leader>W :wall<cr>

" Command line.
cnoremap <C-a> <Home>
cnoremap <C-e> <End>

cnoremap <C-b> <S-Left>
cnoremap <C-f> <S-Right>

cnoremap <C-n> <Down>
cnoremap <C-p> <Up>

cnoremap <C-d> <Del>

" Quickfix jumps.
" nnoremap <silent> ]c :cnext<CR>
" nnoremap <silent> [c :cprevious<CR>
nnoremap <silent> <Leader>. :cnext<CR>
nnoremap <silent> <Leader>, :cprevious<CR>

" Avoid unintentional switches to Ex mode.
nmap Q q

" Repeat last macro if in a normal buffer.
" nnoremap <expr> <CR> empty(&buftype) ? '@@' : '<CR>'
" nnoremap <A-j> k

" Command line. Pretty useful with Caps Lock as Esc.
" nnoremap <Tab> :

" Clear search highlights.
nnoremap <silent> <Leader>/ :let @/=''<CR>

" Open last buffer.
nnoremap <silent> <Leader><Leader> <C-^>

" Cycle through splits.
" nnoremap <S-Tab> <C-w>w

" Press * to search for the term under the cursor or a visual selection and
" then press a key below to replace all instances of it in the current file.
" nnoremap <Leader>r :%s///g<Left><Left>
" nnoremap <Leader>rc :%s///gc<Left><Left><Left>

" nnoremap <Leader>eE :%s///g<Left><Left>
" nnoremap <expr> <Leader>eE ':%s/\V' .. escape(expand('<cword>'), '/\') .. '//g<Left><Left>'
nnoremap <Leader>eE :%s//g<Left><Left>
" The same as above but instead of acting on the whole file it will be
" restricted to the previously visually selected range. You can do that by
" pressing *, visually selecting the range you want it to apply to and then
" press a key below to replace all instances of it in the current selection.
" xnoremap <Leader>r :s///g<Left><Left>
" xnoremap <Leader>rc :s///gc<Left><Left><Left>
xnoremap <Leader>eE :s//g<Left><Left>

" Type a replacement term and press . to repeat the replacement again. Useful
" for replacing a few instances of the term (comparable to multiple cursors).
" nnoremap <silent> cs :let @/='\<'.expand('<cword>').'\>'<CR>cgn
" xnoremap <silent> cs "sy:let @/=@s<CR>cgn

" nnoremap <silent> <Leader>ee :let @/='\<'.expand('<cword>').'\>'<CR>cgn
nnoremap <silent> <Leader>ee *Ncgn
xnoremap <Leader>ee "sy:let @/='\V'.@s<CR>cgn

" As above, only easier.
" nnoremap c* *Ncgn

" Format paragraph (selected or not) to 80 character lines.
" nnoremap <Leader>g gqap
" xnoremap <Leader>g gqa

" Prevent x from overriding what's in the clipboard.
noremap x "_x
noremap X "_X

" Prevent swap " register value with replaced text.
" vnoremap p "_dP

" Prevent selecting and pasting from overwriting what you originally copied.
" xnoremap p pgvy

" Keep cursor at the bottom of the visual selection after you yank it.
vmap y ygv<Esc>

" Edit Vim config file in a new tab.
nnoremap <Leader>ve :edit $MYVIMRC<CR>

" Source Vim config file.
nnoremap <Leader>vr :source $MYVIMRC<CR>

" Install plugins.
nnoremap <leader>vi :PlugInstall<cr>

" Update plugins.
nnoremap <leader>vu :PlugUpdate<cr>

" Toggle spell check.
nnoremap <Leader>os :setlocal spell!<CR>

" Toggle relative line numbers and regular line numbers.
nnoremap <Leader>on :setlocal relativenumber!<CR>
nnoremap <Leader>oN :setlocal number!<CR>

" Toggle visually showing all whitespace characters.
nnoremap <Leader>ol :setlocal list!<CR>

" Toggle nowrap.
nnoremap <Leader>ow :setlocal nowrap! linebreak!<CR>
nnoremap <silent> <Leader>oW :if &fo =~ 't' <bar> set fo-=t <bar> :echomsg "No wrap writing" <bar> else <bar> set fo+=t <bar> :echomsg "Wrap writing" <bar> endif<CR>

" Toggle zen mode.
nnoremap <silent> <leader>oz :Goyo<cr>

" Toggle focus mode.
nnoremap <silent> <leader>of :Limelight!!<cr>

" Toggle highlight cursorline.
nnoremap <silent> <leader>oh :set cursorline!<cr>


" Toggle colorcolun.
function ToggleColorColumn()
        if &colorcolumn | setlocal colorcolumn= | else | setlocal colorcolumn=80,100,120 | endif
endfunction
nnoremap <silent> <Leader>oc :call ToggleColorColumn()<CR>

" Automatically fix the last misspelled word and jump back to where you were.
"   Taken from this talk: https://www.youtube.com/watch?v=lwD8G1P52Sk
nnoremap <leader>es :normal! mz[s1z=`z<CR>
" noremap <F7> :set list!<CR>
" inoremap <F7> <C-o>:set list!<CR>
" cnoremap <F7> <C-c>:set list!<CR>

" Move 1 more lines up or down in normal and visual selection modes.
" nnoremap K :m .-2<CR>==
" nnoremap J :m .+1<CR>==
vnoremap K :m '<-2<CR>gv=gv
vnoremap J :m '>+1<CR>gv=gv


" Basic autocommands
" ---------------------

" Auto-resize splits when Vim gets resized.
autocmd VimResized * wincmd =

" Update a buffer's contents on focus if it changed outside of Vim.
" au FocusGained,BufEnter * :checktime
" autocmd! FocusGained,BufEnter,CursorHold,CursorHoldI * if mode() != 'c' | checktime | endif
autocmd! FocusGained,BufEnter * if mode() !~ '\v(c|r.?|!|t)' && getcmdwintype() == '' | checktime | endif

" Unset paste on InsertLeave.
" autocmd InsertLeave * silent! set nopaste

" Make sure all types of requirements.txt files get syntax highlighting.
autocmd BufNewFile,BufRead requirements*.txt set ft=python

" Make sure .aliases, .bash_aliases and similar files get syntax highlighting.
autocmd BufNewFile,BufRead .*aliases set ft=sh

" Ensure tabs don't get converted to spaces in Makefiles.
autocmd FileType make setlocal noexpandtab


" Basic commands
" ---------------------

" Add all TODO items to the quickfix list relative to where you opened Vim.
function! s:todo() abort
  let entries = []
  for cmd in ['git grep -niIw -e TODO -e FIXME -e XXX 2> /dev/null',
            \ 'grep -rniIw -e TODO -e FIXME -e XXX . 2> /dev/null']
    let lines = split(system(cmd), '\n')
    if v:shell_error != 0 | continue | endif
    for line in lines
      let [fname, lno, text] = matchlist(line, '^\([^:]*\):\([^:]*\):\(.*\)')[1:3]
      call add(entries, { 'filename': fname, 'lnum': lno, 'text': text })
    endfor
    break
  endfor

  if !empty(entries)
    call setqflist(entries)
    copen
  endif
endfunction

command! Todo call s:todo()

" Profile Vim by running this command once to start it and again to stop it.
function! s:profile(bang)
  if a:bang
    profile pause
    noautocmd qall
  else
    profile start /tmp/profile.log
    profile func *
    profile file *
  endif
endfunction

command! -bang Profile call s:profile(<bang>0)

" Plugin settings, mappings and autocommands
" ---------------------

" 'airblade/vim-gitgutter'
" .....................

let g:gitgutter_map_keys = 0

nmap <Leader>au <Plug>(GitGutterUndoHunk)
nmap <Leader>av <Plug>(GitGutterPreviewHunk)

nmap ]c <Plug>(GitGutterNextHunk)
nmap [c <Plug>(GitGutterPrevHunk)

" tpope/vim-dispatch
" .....................
let g:dispatch_no_maps = 1

" junegunn/fzf.vim
" .....................

" let $FZF_DEFAULT_COMMAND = "fd --type f --hidden --follow --exclude .git --exclude 'vendor/' "
" let $FZF_DEFAULT_OPTS = '--bind ctrl-a:select-all --reverse --color bg:#272727,preview-bg:#272727 --preview "chroma {}"'
let $FZF_DEFAULT_OPTS = '--bind ctrl-a:select-all --reverse --color bg:#272727,preview-bg:#272727'

let g:fzf_layout = { 'down': '60%' }
" let g:fzf_layout = { 'window': 'enew' }
" let g:fzf_layout = { 'window': { 'width': 1, 'height': 1 } }
" let g:fzf_layout = { 'window': { 'width': 1, 'height': 0.6 } }
let g:fzf_preview_window = ['up:right:55%', 'ctrl-/']

function! s:delete_buffers(lines)
  execute 'echom' 'test message'
  execute 'echom' join(map(a:lines, {_, line -> split(line)[0]}))
  execute 'bdelete' join(map(a:lines, {_, line -> split(line)[0]}))
endfunction


function! s:build_quickfix_list(lines)
call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
copen
cc
endfunction
        " \ 'ctrl-w': function('s:delete_buffers'),
let g:fzf_action = {
        \ 'ctrl-c': function('s:build_quickfix_list'),
        \ 'ctrl-t': 'tab split',
        \ 'ctrl-s': 'split',
        \ 'ctrl-v': 'vsplit',
        \ 'ctrl-y': {lines -> setreg('*', join(lines, "\n"))}}

" Map a few common things to do with FZF.
nnoremap <silent> <Leader>ff :Files<CR>
nnoremap <silent> <Leader><Enter> :Buffers<CR>
nnoremap <silent> <Leader>fl :Lines<CR>
nnoremap <silent> <Leader>fG :Rg<CR>
nnoremap <silent> <Leader>fg :RgLimited<CR>
nnoremap <silent> <Leader>fm :Maps<CR>

function! RipgrepFzf(query, fullscreen)
        let command_fmt = 'rg --no-column --line-number --no-heading --color=always --smart-case -- %s || true'
        let initial_command = printf(command_fmt, shellescape(a:query))
        let reload_command = printf(command_fmt, '{q}')
        let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
        call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction

command! -nargs=* -bang Rg call RipgrepFzf(<q-args>, <bang>0)

function! RipgrepFzfLimited(query, fullscreen)
        let command_fmt = 'rg --no-column --line-number --no-heading --color=always -g "!vendor/" -g "!venv/" -- %s || true'
        let initial_command = printf(command_fmt, shellescape(a:query))
        let reload_command = printf(command_fmt, '{q}')
        let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
        call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction

command! -nargs=* -bang RgLimited call RipgrepFzfLimited(<q-args>, <bang>0)

" dyng/ctrlsf.vim
" .....................

" let g:ctrlsf_auto_preview = 1

let g:ctrlsf_context = '-B 3 -A 3'
let g:ctrlsf_compact_winsize = '30%'
let g:ctrlsf_winsize = '30%'
let g:ctrlsf_auto_focus = { "at" : "start" }
let g:ctrlsf_populate_qflist = 1

nmap <leader>fc <Plug>CtrlSFCwordExec
vmap <leader>fc <Plug>CtrlSFVwordExec
nmap <leader>fC <Plug>CtrlSFPrompt

" lambdalisue/fern.vim
" .....................

" Disable netrw.
" let g:loaded_netrw  = 1
" let g:loaded_netrwPlugin = 1
" let g:loaded_netrwSettings = 1
" let g:loaded_netrwFileHandlers = 1

" augroup my-fern-hijack
"   autocmd!
"   autocmd BufEnter * ++nested call s:hijack_directory()
" augroup END

" function! s:hijack_directory() abort
"   let path = expand('%:p')
"   if !isdirectory(path)
"     return
"   endif
"   bwipeout %
"   execute printf('Fern %s', fnameescape(path))
" endfunction

" Custom settings and mappings.
" let g:fern#disable_default_mappings = 1

" Use symbols.
" let g:fern#renderer = "nerdfont"


" noremap <silent> <Leader>fd :Fern . -drawer -reveal=% -toggle -width=32<CR><C-w>=
noremap <silent> <Leader>fd :Fern . -drawer -reveal=% -toggle -width=28<CR><C-w>=
" noremap <silent> <Leader>fD <Plug>(fern-action-reveal)
" noremap <silent> <Leader>fd :Fern . -drawer -reveal=% -toggle -width=30<CR><C-w>=

function! s:FernInit() abort
  setlocal nonumber
  setlocal norelativenumber
  nmap <buffer><expr>
        \ <Plug>(fern-my-open-expand-collapse)
        \ fern#smart#leaf(
        \   "\<Plug>(fern-action-open:select)",
        \   "\<Plug>(fern-action-expand)",
        \   "\<Plug>(fern-action-collapse)",
        \ )
  " nmap <buffer> <CR> <Plug>(fern-my-open-expand-collapse)<Esc><Bar>:FernDo close<CR>
  nmap <buffer> <CR> <Plug>(fern-my-open-expand-collapse)<Bar>:FernDo close<CR>
  nmap <buffer> <2-LeftMouse> <Plug>(fern-my-open-expand-collapse)
  nmap <buffer> n <Plug>(fern-action-new-path)
  nmap <buffer> d <Plug>(fern-action-remove)
  nmap <buffer> m <Plug>(fern-action-move)
  nmap <buffer> M <Plug>(fern-action-rename)
  " nmap <buffer> h <Plug>(fern-action-hidden-toggle)
  nmap <buffer> r <Plug>(fern-action-reload)
  " nmap <buffer> k <Plug>(fern-action-mark)
  " nmap <buffer> K <Plug>(fern-action-mark-children:leaf)
  nmap <buffer> b <Plug>(fern-action-open:split)
  nmap <buffer> v <Plug>(fern-action-open:vsplit)
  nmap <buffer><nowait> < <Plug>(fern-action-leave)
  nmap <buffer><nowait> > <Plug>(fern-action-enter)

  nmap <buffer> <C-l> <C-w><C-l>
  nmap <buffer> <C-h> <C-w><C-h>
  nmap <buffer> <C-k> <C-w><C-k>
  nmap <buffer> <C-j> <C-w><C-j>
  " nmap <Leader>l <C-w><C-l>
  " nmap <Leader>h <C-w><C-h>
  " nmap <Leader>k <C-w><C-k>
  " nmap <Leader>j <C-w><C-j>

  " nmap . <Plug>(fern-action-hidden-toggle)
  nmap <silent> <buffer> p     <Plug>(fern-action-preview:toggle)
  nmap <silent> <buffer> <C-p> <Plug>(fern-action-preview:auto:toggle)
  nmap <silent> <buffer> <C-d> <Plug>(fern-action-preview:scroll:down:half)
  nmap <silent> <buffer> <C-u> <Plug>(fern-action-preview:scroll:up:half)
endfunction

augroup FernGroup
  autocmd!
  autocmd FileType fern call s:FernInit()
augroup END


" junegunn/limelight.vim
" .....................

let g:limelight_conceal_ctermfg=244


" janko/vim-test
" .....................

" ij has('nvim')
"   let test#strategy='neovim'
" else
"   let test#strategy='vimterminal'
" endif

" let test#python#pytest#executable='docker-compose exec web py.test'

" let test#ruby#rails#executable='docker-compose exec -e RAILS_ENV=test webpacker rails test'

" let test#elixir#exunit#executable='docker-compose exec -e MIX_ENV=test web mix test'
" let test#strategy = 'asyncrun_background'
" let test#strategy='vimterminal'
let test#strategy='dispatch'

nmap <silent> <Leader>tn :TestNearest -v<CR>
nmap <silent> <Leader>tf :TestFile -v<CR>
nmap <silent> <Leader>ts :TestSuite -v<CR>
nmap <silent> <Leader>tl :TestLast -v<CR>
nmap <silent> <Leader>tv :TestVisit<CR>
" autocmd FileType go nmap <Leader>tt <Plug>(go-coverage-toggle)
nnoremap <leader>tt :if &filetype == "go" <bar> execute ":GoCoverageToggle" <bar> endif <CR>
" nmap <silent> <Leader>tt :if &filetype == "go" <bar> :GoCoverageToggle<CR> <bar> endif<CR>

" nnoremap <silent> <Leader>oW :if &fo =~ 't' <bar> set fo-=t <bar> :echomsg "No wrap writing" <bar> else <bar> set fo+=t <bar> :echomsg "Wrap writing" <bar> endif<CR>

" fatih/vim-go
" .....................

let g:go_gopls_enabled = 1 " enable description in command line
let g:go_code_completion_enabled = 0
let g:go_def_mapping_enabled = 0
let g:go_diagnostics_enabled = 0

let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_structs = 1
let g:go_highlight_types = 1

let g:go_auto_type_info = 1


" justinmk/vim-sneak
" .....................

let g:sneak#use_ic_scs = 1
let g:sneak#label = 1

" prabirshrestha/vim-lsp
" .....................

let g:lsp_diagnostics_float_cursor = 1
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_diagnostics_enabled = 1
let g:lsp_preview_float = 1
let g:lsp_hover_conceal = 2
let g:lsp_document_highlight_enabled = 1
let g:lsp_document_highlight_delay = 10
let g:lsp_semantic_enabled = 1
" let g:lsp_preview_autoclose = 1

" let g:lsp_preview_keep_focus = 0
" let g:lsp_preview_float = 0

function! s:on_lsp_buffer_enabled() abort
    " setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gR <plug>(lsp-call-hierarchy-outgoing)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gy <plug>(lsp-type-definition)
    nmap <buffer> <leader>er <plug>(lsp-rename)
    nmap <buffer> <leader>n <plug>(lsp-next-reference)
    nmap <buffer> <leader>p <plug>(lsp-previous-reference)
    nmap <buffer> ]d <plug>(lsp-next-diagnostic)
    nmap <buffer> [d <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]e <plug>(lsp-next-error)
    nmap <buffer> [e <plug>(lsp-previous-error)
    nmap <buffer> ]w <plug>(lsp-next-warning)
    nmap <buffer> [w <plug>(lsp-previous-warning)
    nmap <buffer> K <plug>(lsp-hover)
    nmap <buffer> <Leader>ac <plug>(lsp-code-action)
    vmap <buffer> <Leader>ac <plug>(lsp-code-action)
    " vmap <buffer> <Leadej>ac <plug>(lsp-code-action)
    nmap <buffer> <Leader>al <plug>(lsp-code-lens)
    vmap <buffer> <Leader>al <plug>(lsp-code-lens)
    inoremap <buffer> <expr><c-f> lsp#scroll(+4)
    inoremap <buffer> <expr><c-d> lsp#scroll(-4)

    " let g:lsp_format_sync_timeout = 1000
    let g:lsp_format_sync_timeout = -1
    autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
    
   " set foldmethod=expr
    "   \ foldexpr=lsp#ui#vim#folding#foldexpr()
    "   \ foldtext=lsp#ui#vim#folding#foldtext()

    " refer to doc to add more commands
endfunction

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

" liuchengxu/vista.vim
" .....................

let g:vista#renderer#enable_icon = 0
let g:vista_sidebar_width = 50
let g:vista_close_on_jump = 1
let g:vista_disable_statusline = 1
let g:vista_highlight_whole_line = 1
let g:vista_executive_for = {
        \ 'go': 'vim_lsp',
        \ 'php': 'vim_lsp',
        \ 'vim': 'vim_lsp',
        \ 'python': 'vim_lsp',
        \ }

noremap <silent> <Leader>fs :Vista!!<CR>

" vim-syntastic/syntastic
" .....................

let g:syntastic_go_checkers = ["golangci_lint"]

" milkypostman/vim-togglelist
" .....................

let g:toggle_list_no_mappings = 1
nnoremap <script> <silent> <leader>c :call ToggleQuickfixList()<CR>
nnoremap <script> <silent> <leader>C :call ToggleLocationList()<CR>

" puremourning/vimspector
" .....................

let g:vimspector_sidebar_width = 60
let g:vimspector_base_dir = expand( '$HOME/.vim/vimspector-config' )
let g:vimspector_sign_priority = {
        \    'vimspectorBP':         998,
        \    'vimspectorBPCond':     997,
        \    'vimspectorBPDisabled': 996,
        \    'vimspectorPC':         999,
        \ }

function! GotoWindow(id)
  :call win_gotoid(a:id)
endfun
function! AddToWatch()
  let word = expand("<cexpr>")
  call vimspector#AddWatch(word)
endfunction

nnoremap <leader>dd :call vimspector#Launch()<CR>
nnoremap <leader>dD :call vimspector#Restart()<CR>
nnoremap <leader>dq :call vimspector#Reset()<CR>

nnoremap <leader>dr :call vimspector#Continue()<CR>
nnoremap <leader>dh :call vimspector#RunToCursor()<CR>
nnoremap <leader>dk :call vimspector#StepOut()<CR>
nnoremap <leader>dj :call vimspector#StepInto()<CR>
nnoremap <leader>dl :call vimspector#StepOver()<CR>

nnoremap <leader>db :call vimspector#ToggleBreakpoint()<CR>
nnoremap <leader>dB :call vimspector#ToggleAdvancedBreakpoint()<CR>
nnoremap <leader>da :call AddToWatch()<CR>
nnoremap <Leader>di <Plug>VimspectorBalloonEval
nnoremap <leader>dx :call vimspector#ClearBreakpoints()<CR>

nnoremap <leader>dc :call GotoWindow(g:vimspector_session_windows.code)<CR>
nnoremap <leader>dv :call GotoWindow(g:vimspector_session_windows.variables)<CR>
nnoremap <leader>dw :call GotoWindow(g:vimspector_session_windows.watches)<CR>
nnoremap <leader>ds :call GotoWindow(g:vimspector_session_windows.stack_trace)<CR>
nnoremap <leader>do :call GotoWindow(g:vimspector_session_windows.output)<CR>

" L-dd  "Debug start"
" L-dD  "Debug restart with the same config"
" L-dq  "Debug Quit"

" L-dr  "Debug Run"
" L-dh  "Debug Here / Run to cursor"
" L-dj  "Debug Into"
" L-dk  "Debug Out"
" L-dl  "Debug Over"

" L-db  "Debug Breakpoint"
" L-da  "Debug Add to watch the symbol"
" L-dx  "Debug clear breakpoints"
" L-di  "Debug Inspect"
        " L-dB  "Debug Conditional Breakpoint"

" L-dc  "Debug Code window"
" L-dv  "Debug Variables window"
" L-dw  "Debug Watch window"
" L-ds  "Debug Stack trace window"
" L-do  "Debug Output window"

" tpope/vim-dispatch
" .....................

" tpope/vim-fugitive
" .....................
nnoremap <Leader>vg :Git<CR>
nnoremap <Leader>vb :Git blame<CR>
nnoremap <Leader>vB :.GBrowse<CR>
nnoremap <Leader>vD :Gvdiffsplit<CR>
nnoremap <Leader>vd :Git difftool<CR>
nnoremap <Leader>vl :0Gclog<CR>
nnoremap <Leader>vL :Gclog<CR>

" junegunn/goyo.vim
" .....................
" let g:goyo_width = 120
let g:goyo_width = '60%'
let g:goyo_height = '95%'

" itchyny/lightline.vim
" mengelbrecht/lightline-bufferline
" .....................

let g:lightline = {}
let g:lightline.colorscheme = 'gruvbox'
let g:lightline.colorscheme = 'gruvbit'
let g:lightline.colorscheme = 'deus'
" let g:lightline.subseparator = { 'left': 'â', 'right': 'â' }
let g:lightline.subseparator = { 'left': 'â', 'right': 'â'}
let g:lightline.active = {}
" let g:lightline.active.left = [ [ 'mode', 'paste' ], [ 'relativepath' ], [ 'line', 'readonly', 'modified' ] ]
let g:lightline.active.left = [ [ 'mode', 'paste' ], [ 'relativepath' ], [ 'lineinfo', 'readonly', 'modified' ] ]
let g:lightline.active.right = [ ['clock'], ['lang'],  [ 'gitbranch' ] ]
" let g:lightline.active.right = [ [ 'functionName', 'gitbranch' ] ]
let g:lightline.inactive = {}
" let g:lightline.inactive.left = [ [ 'mode', 'paste' ], [ 'relativepath' ], [ 'line', 'readonly', 'modified' ] ]
let g:lightline.inactive.left = [ [ 'mode', 'paste' ], [ 'relativepath' ], [ 'lineinfo', 'readonly', 'modified' ] ]
let g:lightline.inactive.right = [ ['iclock'], ['lang'], [ 'gitbranch' ]  ]
let g:lightline.tabline = {}
let g:lightline.tabline.left = [ [] ]
let g:lightline.tabline.right = [ [], ['buffers'] ]
let g:lightline.tabline = {} " off
" set showtabline=2
set showtabline=0
" let g:lightline.tabline.right = [ ['close'] ]
let g:lightline.component = {}
let g:lightline.component.iclock= ''
let g:lightline.component.clock = '%{strftime("%H:%M")}'
let g:lightline.component.lang = '%{&iminsert ? "ru" : "en"}'
let g:lightline.component_expand = {}
let g:lightline.component_expand.buffers = 'lightline#bufferline#buffers'
" let g:lightline.component_expand.functionName = 'NearestMethodOrFunction'
let g:lightline.component_function = {}
let g:lightline.component_function.gitbranch = 'FugitiveHead'
let g:lightline.component_type = {}
let g:lightline.component_type.buffers = 'tabsel'
let g:lightline.component_visible_condition = {}
let g:lightline.component_visible_condition.im = '&iminsert'

if exists('*lightline#update')
    autocmd BufWritePost,TextChanged,TextChangedI * call lightline#update()
endif

nnoremap <silent> <Leader>1 :call lightline#bufferline#go(1)<cr>
nnoremap <silent> <Leader>2 :call lightline#bufferline#go(2)<cr>
nnoremap <silent> <Leader>3 :call lightline#bufferline#go(3)<cr>
nnoremap <silent> <Leader>4 :call lightline#bufferline#go(4)<cr>
nnoremap <silent> <Leader>5 :call lightline#bufferline#go(5)<cr>
nnoremap <silent> <Leader>6 :call lightline#bufferline#go(6)<cr>
nnoremap <silent> <Leader>7 :call lightline#bufferline#go(7)<cr>
nnoremap <silent> <Leader>8 :call lightline#bufferline#go(8)<cr>
nnoremap <silent> <Leader>9 :call lightline#bufferline#go(9)<cr>
nnoremap <silent> <Leader>0 :call lightline#bufferline#go(10)<cr>
nnoremap <silent> <Leader>[ :bprevious<cr>
nnoremap <silent> <Leader>] :bnext<cr>

set noshowmode

let g:lightline#bufferline#shorten_path = 1
let g:lightline#bufferline#smart_path = 0
let g:lightline#bufferline#right_aligned = 1
let g:lightline#bufferline#unnamed      = '[New]'


" let g:lightline#bufferline#filename_modifier = ':.'
let g:lightline#bufferline#show_number = 2
let g:lightline#bufferline#number_map = {
\ 0: 'â°', 1: 'Â¹', 2: 'Â²', 3: 'Â³', 4: 'â´',
\ 5: 'âµ', 6: 'â¶', 7: 'â·', 8: 'â¸', 9: 'â¹'}

" let s:p.normal.left = [ ['#0000ff', '#ffffff', 21, 231, 'bold' ], [ '#ffffff', '#0000ff', 231, 21 ] ]
" let g:lightline#colorscheme#landscape#palette = s:p

" prabirshrestha/asyncomplete-lsp.vim
" ---
let g:asyncomplete_auto_popup       = 1
let g:asyncomplete_auto_completeopt = 0

autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif
" inoremap <expr> <Tab>   pumvisible() ? "<C-n>" : "<Tab>"
" inoremap <expr> <S-Tab> pumvisible() ? "<C-p>" : "<S-Tab>"
inoremap <expr> <Cr>    pumvisible() ? "<C-y>" : "<Cr>"

" SirVer/ultisnips
" .....................

" let g:UltiSnipsJumpForwardTrigger="<tab>"
" let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
if has('python3')
" if exists('*asyncomplete#register_source')
    " let g:UltiSnipsJumpForwardTrigger="<c-j>"
    " let g:UltiSnipsJumpBackwardTrigger="<c-k>"
    let g:UltiSnipsExpandTrigger="<tab>"
    let g:UltiSnipsJumpForwardTrigger="<tab>"
    let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
    let g:UltiSnipsEditSplit="vertical"
    call asyncomplete#register_source(asyncomplete#sources#ultisnips#get_source_options({
        \ 'name': 'ultisnips',
        \ 'allowlist': ['*'],
        \ 'completor': function('asyncomplete#sources#ultisnips#completor'),
        \ }))
" endif
endif

" vim:foldmethod=marker
