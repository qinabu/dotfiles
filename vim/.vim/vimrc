" My Help {{{
"
" NAVIGATION & WINDOWS & COMMANDS
" C-hjkl- move to window            // C-wC-h...
" L-hjkl- move to window
" L-v   - PARTIAL mappting to ^w

" L-L   - previous buffer           // C-^
" L-/   - clear search highlight    // :noh
" L-;   - command line              // :
" jj    - ESC insert / command      // <C-c>

" L-oo  - "Only One maximized"      // :MaximizerToggle!
" L-oO  - "Only One window"         // :only

" L-qq  - "Quit window"             // :quit
" L-qw  - "Quit and Write"          // :wq
" L-qb  - "Quit Buffer"             // :bdelete
" L-qc  - "Quit c quickfix"         // :cclose
" L-ql  - "Quit l location list"    // :lclose
" L-qp  - "Quit p preview window"   // :pclose
" L-qa  - "Quit All"                // :qall
" L-qe  - "Quit & Exit w/o save"    // :qall!

" L-c   - "c Quickfix toggle"
" L-n   - "n locatioN list toggle"
"
" VIM & VIEW
" L-ve  - "Vim Edit vimrc"          // :edit $MYVIMRC
" L-vr  - "Vim Runtime vimrc"       // :source $MYVIMRC
" L-vi  - "Vim Install plugins"     // :PlugInstall
" L-vu  - "Vim Update plugins"      // :PlugUpdate
"
" L-vb  - "View Blame"              // :Gblame
" L-vd  - "View Diff split"         // :Gdiffsplit
" L-vD  - "View Difftool"           // :Git difftool
" L-vg  - "View Git window"         // :Git

" OPTIONS TOGGLES
" L-os  - "Option Spell"            // :setlocal spell!
" L-or  - "Option Relative numbers" // :setlocal relativenumber!
" L-ol  - "Option List mode"        // :setlocal list!
" L-ow  - "Option Wrap"             // :setlocal nowrap!
" L-oc  - "Option ColorColumns"     // ToggleColorColumn()
" L-oz  - "Option Zen mode"         // :Goyo
" L-of  - "Option Focus mode"       // :Limelight!!

" EDIT
" L-w   - "Write"                   // :write
" Enter - repeat last macro
"
" K     - "K-Up move selected"      // :visual
" J     - "J-Down move selected"    // :visual
" L-es  - "Edit Spelling mistake"
" L-er  - "Edit Rename"             // <plug>(lsp-rename)
" TODO: finish
" L-ee  - "Edit symbol / selection" // Search next: n/N. Repeat: .
" L-eE  - "Edit symbol / selection" // Substitute
"
" FIND
" L-ff  - "Find File"               // :FZF
" L-fd  - "Find Directory"          // :Fern
" L-fs  - "Find Symbol"             // :Vista
" L-fc  - "Find symbol under Cursor"// CtrlSF

" }}}

" Based on
" https://raw.githubusercontent.com/nickjj/dotfiles/master/.vimrc
" https://github.com/wincent/wincent/tree/aa3a322e3a911dabe0ef398ebb1fd7c77209b8ac/roles/dotfiles/files/.vim
" ./vimrc-lightline.vim

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  source $MYVIMRC | PlugInstall --sync
  " autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif


" Plugins
" ---------------------

" Specify a directory for plugins.
call plug#begin('~/.vim/plugged')
Plug 'habamax/vim-gruvbit'
" Plug 'morhetz/gruvbox'
Plug 'noahfrederick/vim-noctu'
Plug 'humanoid-colors/vim-humanoid-colorscheme'

" Jump to any location specified by two characters.
Plug 'justinmk/vim-sneak'

" Integrate fzf with Vim.
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Search and edit tool.
Plug 'dyng/ctrlsf.vim'

Plug 'szw/vim-maximizer'

" Navigate and manipulate files in a tree view.
Plug 'lambdalisue/fern.vim'
Plug 'lambdalisue/fern-git-status.vim'

" Modify * to also work with visual selections.
Plug 'nelstrom/vim-visual-star-search'

" Automatically clear search highlights after you move your cursor.
Plug 'haya14busa/is.vim'

" Toggle comments in various ways.
Plug 'tpope/vim-commentary'

Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'

" A git wrapper.
Plug 'tpope/vim-fugitive'

" Show git file changes in the gutter.
" Plug 'mhinz/vim-signify'
Plug 'airblade/vim-gitgutter'

" Run test suites for various languages.
Plug 'janko/vim-test'

" Build and test dispatcher.
Plug 'tpope/vim-dispatch'

" Golang extended support
Plug 'fatih/vim-go'

" GoTests generator: go get -u github.com/cweill/gotests/...
Plug 'buoto/gotests-vim'

" Toggle functions for quickfix and location list.
Plug 'milkypostman/vim-togglelist'

" LSP & Autocomplete
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'

" Debug Adapter Protocol for vim (.dotfiles/vim/.vim/vimspector-config/).
Plug 'puremourning/vimspector'
" Document inspector.
Plug 'liuchengxu/vista.vim'

" Distraction-free writing in Vim.
Plug 'junegunn/goyo.vim'
" * Dim paragraphs above and below the active paragraph.
Plug 'junegunn/limelight.vim'


Plug 'itchyny/lightline.vim'
Plug 'mengelbrecht/lightline-bufferline'

call plug#end()


" Basic functions

function! NearestMethodOrFunction() abort
  return get(b:, 'vista_nearest_method_or_function', '')
endfunction
autocmd VimEnter * call vista#RunForNearestMethodOrFunction()

" let g:fubitive_domain_pattern = 'stash\.msk\.avito\.ru'
" let g:fugitive_bitbucketservers_domains = ['stash.msk.avito.ru']
"  Color settings
" ---------------------

" non-break-space
set fillchars+=vert: 
" highlight VertSplit cterm=NONE ctermfg=Green ctermbg=NONE guibg=#000000 guifg=#000000
hi VertSplit gui=reverse

" Enable 24-bit true colors if your terminal supports it.
if (has("termguicolors"))
  set termguicolors
endif

" Enable syntax highlighting.
" syntax on
syntax on

function! s:patch_humanoid_colors()
        highlight cursorline ctermbg=White guibg=White
        highlight cursorlinenr cterm=none gui=none
        highlight label cterm=none gui=none
        highlight function cterm=bold gui=bold ctermfg=16 guifg=#010000
        highlight operator cterm=none gui=none ctermfg=16 guifg=#010000
        highlight string ctermfg=29 guifg=#00875f
        highlight keyword ctermfg=25 guifg=#005faf
        highlight number ctermfg=124 guifg=#af0000
        highlight float ctermfg=124 guifg=#af0000
        highlight boolean ctermfg=32 guifg=#0087d7
        highlight type ctermfg=131 guifg=#af5f5f

        highlight link conditional label
        highlight link goConditional label

        highlight goTypeName ctermfg=168 guifg=#d75f5f

        " Spelling mistakes will be colored up red.
        highlight SpellBad cterm=underline ctermfg=203 guifg=#ff5f5f
        highlight SpellLocal cterm=underline ctermfg=203 guifg=#ff5f5f
        highlight SpellRare cterm=underline ctermfg=203 guifg=#ff5f5f
        highlight SpellCap cterm=underline ctermfg=203 guifg=#ff5f5f

        " lsp
        highlight lspReference ctermbg=Yellow guibg=Yellow
endfunction
autocmd! ColorScheme humanoid call s:patch_humanoid_colors()

function! s:patch_gruvbox_colors()
        " Spelling mistakes will be colored up red.
        highlight SpellBad cterm=underline ctermfg=203 guifg=#ff5f5f
        highlight SpellLocal cterm=underline ctermfg=203 guifg=#ff5f5f
        highlight SpellRare cterm=underline ctermfg=203 guifg=#ff5f5f
        highlight SpellCap cterm=underline ctermfg=203 guifg=#ff5f5f
         
        highlight lspReference ctermbg=241 guibg=#665c54
endfunction
autocmd! ColorScheme gruvbox call s:patch_gruvbox_colors()

function! s:patch_gruvbit_colors()
        " lsp
        highlight lspReference ctermfg=229 guifg=#FFFFAF ctermbg=240 guibg=#585858
        " highlight lspReference ctermfg=229 guifg=#FFFFAF ctermbg=94 guibg=#875F00
        " highlight lspReference ctermfg=229 guifg=#FFFFAF ctermbg=89 guibg=#87005F
        " highlight lspReference ctermfg=222 guifg=#FFD787 ctermbg=89 guibg=#87005F
        "
        " Selection
        highlight Visual ctermbg=40 guibg=#00F700 ctermfg=232 guifg=#080808 

        " Spelling mistakes will be colored up red.
        highlight SpellBad cterm=underline ctermfg=203 guifg=#ff5f5f
        highlight SpellLocal cterm=underline ctermfg=203 guifg=#ff5f5f
        highlight SpellRare cterm=underline ctermfg=203 guifg=#ff5f5f
        highlight SpellCap cterm=underline ctermfg=203 guifg=#ff5f5f
endfunction
autocmd! ColorScheme gruvbit call s:patch_gruvbit_colors()

" set background=light
let g:gruvbit_transp_bg = v:true
set background=dark
" colorscheme humanoid
" colorscheme gruvbox
colorscheme gruvbit

" Status line
" ---------------------

" Heavily inspired by: 
" https://github.com/junegunn/dotfiles/blob/master/vimrc
function! s:statusline_expr()
        let mod = "%{&modified ? '[+] ' : !&modifiable ? '[-] ' : ''}"
        let ro  = "%{&readonly ? '[RO] ' : ''}"
        let ft  = "%{len(&filetype) ? '['.&filetype.'] ' : ''}"
        let fug = "%{exists('g:loaded_fugitive') ? fugitive#statusline() : ''}"
        let sep = ' %= '
        let pos = ' %-12(%l : %c%V%)'
        let pct = ' %P '
        " let fn  = '%{pathshorten(expand("%:."))}'
        let fn  = '%{expand("%:.")}'

        return '[%n:%{mode()}] '.fn.':%l %<'.mod.ro.ft.fug.sep.pos.'%*'.pct
endfunction

let &statusline = s:statusline_expr()

" Basic Settings
" ---------------------

" set mouse=a
" set colorcolumn=80

set langmap=ФИСВУАПРШОЛДЬТЩЗЙКЫЕГМЦЧНЯ;ABCDEFGHIJKLMNOPQRSTUVWXYZ,фисвуапршолдьтщзйкыегмцчня;abcdefghijklmnopqrstuvwxyz
let mapleader=" "
let maplocalleader=" "

set lazyredraw
set updatetime=100
set autoindent
set autoread
set backspace=indent,eol,start
set backupdir=/tmp//,.
set clipboard=unnamed
" set complete+=kspell
" set completeopt=menuone,longest
set completeopt=menuone,noinsert,noselect,preview
" set cursorline
set directory=/tmp//,.
set encoding=utf-8
set expandtab smarttab
set formatoptions=tcqrn1
set hidden
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set matchpairs+=<:> " Use % to jump between pairs
set mmp=5000
set modelines=2
set mouse=n
set nocompatible
set noerrorbells visualbell t_vb=
set noshiftround
set nostartofline
set noswapfile
set number relativenumber
set regexpengine=1
set ruler
set scrolloff=3
set shiftwidth=8
set shortmess+=c
set showcmd
set showmatch
set showmode
set smartcase
set softtabstop=4
set nospell
set spelllang=en_us,ru_yo
set splitbelow
set splitright
set tabstop=8
set textwidth=0
set timeoutlen=1500
set ttimeout
set ttimeoutlen=0
set ttyfast
set undodir=/tmp
set undofile
set virtualedit=block
set whichwrap=b,s,<,>
set wildmenu
set wildmode=full
set nowrap
set listchars=tab:▹\ ,space:∙,eol:¬
set nolist

" Basic mappings
" ---------------------

" Partial mapping L-v to CTRL-w
nnoremap <Leader>v <C-w>

" Command line.
nnoremap <Leader>; :

" Exit from insert and command mode.
" cnoremap jj <C-c>
" inoremap jj <C-c>
" inoremap оо <C-c>

" Seamlessly treat visual lines as actual lines when moving around.

noremap j gj
noremap k gk
noremap <Down> gj
noremap <Up> gk
inoremap <Down> <C-o>gj
inoremap <Up> <C-o>gk

" Navigate around splits with a single key combo.
nnoremap <C-l> <C-w><C-l>
nnoremap <C-h> <C-w><C-h>
nnoremap <C-k> <C-w><C-k>
nnoremap <C-j> <C-w><C-j>

nnoremap <Leader>l <C-w><C-l>
nnoremap <Leader>h <C-w><C-h>
nnoremap <Leader>k <C-w><C-k>
nnoremap <Leader>j <C-w><C-j>

tnoremap <C-l> <C-w><C-l>
tnoremap <C-h> <C-w><C-h>
tnoremap <C-k> <C-w><C-k>
tnoremap <C-j> <C-w><C-j>

nnoremap <silent> <Leader>oO :only<CR>
nnoremap <silent> <Leader>oo :MaximizerToggle<CR>

" Quit commands.
nnoremap <silent> <Leader>qq :quit<CR>
nnoremap <silent> <Leader>qw :wq<CR>
nnoremap <silent> <Leader>qb :bdelete<CR>
nnoremap <silent> <Leader>qc :cclose<CR>
nnoremap <silent> <Leader>ql :lclose<CR>
nnoremap <silent> <Leader>qp :pclose<CR>
nnoremap <silent> <Leader>qa :qall<CR>
nnoremap <silent> <Leader>qe :qall!<CR>

" Write buffer.
nnoremap <Leader>w :write<cr>

cnoremap <C-a> <Home>
cnoremap <C-e> <End>

" Quickfix jumps.
nnoremap <silent> ]q :cnext<CR>
nnoremap <silent> [q :cprevious<CR>

" Avoid unintentional switches to Ex mode.
nmap Q q

" Repeat last macro if in a normal buffer.
" nnoremap <expr> <CR> empty(&buftype) ? '@@' : '<CR>'
" nnoremap <A-j> k

" Command line. Pretty useful with Caps Lock as Esc.
" nnoremap <Tab> :

" Clear search highlights.
nnoremap <silent> <Leader>/ :let @/=''<CR>

" Open last buffer.
nnoremap <silent> <Leader><Leader> <C-^>

" Cycle through splits.
" nnoremap <S-Tab> <C-w>w

" Press * to search for the term under the cursor or a visual selection and
" then press a key below to replace all instances of it in the current file.
" nnoremap <Leader>r :%s///g<Left><Left>
" nnoremap <Leader>rc :%s///gc<Left><Left><Left>

" nnoremap <Leader>eE :%s///g<Left><Left>
" nnoremap <expr> <Leader>eE ':%s/\V' .. escape(expand('<cword>'), '/\') .. '//g<Left><Left>'
nnoremap <Leader>eE :%s///g<Left><Left>
" The same as above but instead of acting on the whole file it will be
" restricted to the previously visually selected range. You can do that by
" pressing *, visually selecting the range you want it to apply to and then
" press a key below to replace all instances of it in the current selection.
" xnoremap <Leader>r :s///g<Left><Left>
" xnoremap <Leader>rc :s///gc<Left><Left><Left>
xnoremap <Leader>eE :s///g<Left><Left>

" Type a replacement term and press . to repeat the replacement again. Useful
" for replacing a few instances of the term (comparable to multiple cursors).
" nnoremap <silent> cs :let @/='\<'.expand('<cword>').'\>'<CR>cgn
" xnoremap <silent> cs "sy:let @/=@s<CR>cgn

" nnoremap <silent> <Leader>ee :let @/='\<'.expand('<cword>').'\>'<CR>cgn
nnoremap <silent> <Leader>ee *Ncgn
xnoremap <silent> <Leader>ee "sy:let @/=@s<CR>cgn

" As above, only easier.
" nnoremap c* *Ncgn

" Format paragraph (selected or not) to 80 character lines.
" nnoremap <Leader>g gqap
" xnoremap <Leader>g gqa

" Prevent x from overriding what's in the clipboard.
noremap x "_x
noremap X "_x

" Prevent selecting and pasting from overwriting what you originally copied.
xnoremap p pgvy

" Keep cursor at the bottom of the visual selection after you yank it.
vmap y ygv<Esc>

" Edit Vim config file in a new tab.
nnoremap <Leader>ve :edit $MYVIMRC<CR>

" Source Vim config file.
nnoremap <Leader>vr :source $MYVIMRC<CR>

" Install plugins.
nnoremap <leader>vi :PlugInstall<cr>

" Update plugins.
nnoremap <leader>vu :PlugUpdate<cr>

" Toggle spell check.
nnoremap <Leader>os :setlocal spell!<CR>

" Toggle relative line numbers and regular line numbers.
nnoremap <Leader>or :setlocal relativenumber!<CR>

" Toggle visually showing all whitespace characters.
nnoremap <Leader>ol :setlocal list!<CR>

" Toggle nowrap.
nnoremap <Leader>ow :setlocal nowrap!<CR>

" Toggle zen mode.
nnoremap <silent> <leader>oz :Goyo<cr>

" Toggle focus mode.
nnoremap <silent> <leader>of :Limelight!!<cr>



" Toggle colorcolun.
function ToggleColorColumn()
        if &colorcolumn | setlocal colorcolumn= | else | setlocal colorcolumn=80,100,120 | endif
endfunction
nnoremap <silent> <Leader>oc :call ToggleColorColumn()<CR>

" Automatically fix the last misspelled word and jump back to where you were.
"   Taken from this talk: https://www.youtube.com/watch?v=lwD8G1P52Sk
nnoremap <leader>es :normal! mz[s1z=`z<CR>
" noremap <F7> :set list!<CR>
" inoremap <F7> <C-o>:set list!<CR>
" cnoremap <F7> <C-c>:set list!<CR>

" Move 1 more lines up or down in normal and visual selection modes.
" nnoremap K :m .-2<CR>==
" nnoremap J :m .+1<CR>==
vnoremap K :m '<-2<CR>gv=gv
vnoremap J :m '>+1<CR>gv=gv

" Convert the selected text's title case using the external tcc script.
"   Requires: https://github.com/nickjj/title-case-converter
" vnoremap <Leader>tc c<C-r>=system('tcc', getreg('"'))[:-2]<CR>

" Navigate the complete menu items like CTRL+n / CTRL+p would.
" inoremap <expr> <Down> pumvisible() ? "<C-n>" :"<Down>"
" inoremap <expr> <Up> pumvisible() ? "<C-p>" : "<Up>"

" Select the complete menu item like CTRL+y would.
" inoremap <expr> <Right> pumvisible() ? "<C-y>" : "<Right>"
" inoremap <expr> <CR> pumvisible() ? "<C-y>" :"<CR>"
" inoremap <expr> <Tab> pumvisible() ? "<C-y>" :"<Tab>"


" Cancel the complete menu item like CTRL+e would.
" inoremap <expr> <Left> pumvisible() ? "<C-e>" : "<Left>"

" Basic autocommands
" ---------------------

" Auto-resize splits when Vim gets resized.
autocmd VimResized * wincmd =

" Update a buffer's contents on focus if it changed outside of Vim.
" au FocusGained,BufEnter * :checktime
" autocmd! FocusGained,BufEnter,CursorHold,CursorHoldI * if mode() != 'c' | checktime | endif
autocmd! FocusGained,BufEnter * if mode() !~ '\v(c|r.?|!|t)' && getcmdwintype() == '' | checktime | endif

" Unset paste on InsertLeave.
autocmd InsertLeave * silent! set nopaste

" Make sure all types of requirements.txt files get syntax highlighting.
autocmd BufNewFile,BufRead requirements*.txt set ft=python

" Make sure .aliases, .bash_aliases and similar files get syntax highlighting.
autocmd BufNewFile,BufRead .*aliases set ft=sh

" Ensure tabs don't get converted to spaces in Makefiles.
autocmd FileType make setlocal noexpandtab

" Only show the cursor line in the active buffer.
" augroup CursorLineForCurrentWindow
"     au!
"     au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
"     au WinLeave * setlocal nocursorline
" augroup END

" Mappings to make Vim more friendly towards presenting slides.
" autocmd BufNewFile,BufRead *.vpm call SetVimPresentationMode()
" function SetVimPresentationMode()
"   nnoremap <buffer> <Right> :n<CR>
"   nnoremap <buffer> <Left> :N<CR>
" 
"   if !exists('#goyo')
"     Goyo
"   endif
" endfunction

" Basic commands
" ---------------------

" Add all TODO items to the quickfix list relative to where you opened Vim.
function! s:todo() abort
  let entries = []
  for cmd in ['git grep -niIw -e TODO -e FIXME 2> /dev/null',
            \ 'grep -rniIw -e TODO -e FIXME . 2> /dev/null']
    let lines = split(system(cmd), '\n')
    if v:shell_error != 0 | continue | endif
    for line in lines
      let [fname, lno, text] = matchlist(line, '^\([^:]*\):\([^:]*\):\(.*\)')[1:3]
      call add(entries, { 'filename': fname, 'lnum': lno, 'text': text })
    endfor
    break
  endfor

  if !empty(entries)
    call setqflist(entries)
    copen
  endif
endfunction

command! Todo call s:todo()

" Profile Vim by running this command once to start it and again to stop it.
function! s:profile(bang)
  if a:bang
    profile pause
    noautocmd qall
  else
    profile start /tmp/profile.log
    profile func *
    profile file *
  endif
endfunction

command! -bang Profile call s:profile(<bang>0)

" Plugin settings, mappings and autocommands
" ---------------------

" 'airblade/vim-gitgutter'
" .....................

let g:gitgutter_map_keys = 0

" tpope/vim-dispatch
" .....................
let g:dispatch_no_maps = 1

" junegunn/fzf.vim
" .....................

let $FZF_DEFAULT_OPTS = '--bind ctrl-a:select-all --reverse'

" let g:fzf_layout = { 'down': '35%' }
" let g:fzf_layout = { 'window': 'enew' }
let g:fzf_layout = { 'window': { 'width': 1, 'height': 1 } }
let g:fzf_preview_window = ['up:right:55%', 'ctrl-/']
let g:fzf_action = {
        \ 'ctrl-t': 'tab split',
        \ 'ctrl-s': 'split',
        \ 'ctrl-v': 'vsplit',
        \ 'ctrl-y': {lines -> setreg('*', join(lines, "\n"))}}
let g:fzf_colors =
        \ {'fg':     ['fg', 'Normal'],
        \ 'bg':      ['bg', 'Normal'],
        \ 'hl':      ['fg', 'Comment'],
        \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
        \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
        \ 'hl+':     ['fg', 'Statement'],
        \ 'info':    ['fg', 'PreProc'],
        \ 'border':  ['fg', 'Ignore'],
        \ 'prompt':  ['fg', 'Conditional'],
        \ 'pointer': ['fg', 'Exception'],
        \ 'marker':  ['fg', 'Keyword'],
        \ 'spinner': ['fg', 'Label'],
        \ 'header':  ['fg', 'Comment'] }


noremap <silent> <Leader>ff :Files<CR>

" Map a few common things to do with FZF.
nnoremap <silent> <Leader><Enter> :Buffers<CR>
nnoremap <silent> <Leader>fl :Lines<CR>
nnoremap <silent> <Leader>fg :Rg<CR>

" Allow passing optional flags into the Rg command.
"   Example: :Rg myterm -g '*.md'
" command! -bang -nargs=* Rg
"   \ call fzf#vim#grep(
"   \ "rg --column --line-number --no-heading --color=always --smart-case " .
"   \ <q-args>, 1, fzf#vim#with_preview(), <bang>0)
" command! -bang -nargs=* Rg
"         \ call fzf#vim#grep(
"         \   'rg --column --line-number --no-heading --color=always --smart-case -- '.shellescape(<q-args>), 1,
"         \   fzf#vim#with_preview(), <bang>0)

" command! -bang -nargs=? -complete=dir Files
"         \ call fzf#vim#files(<q-args>, fzf#vim#with_preview({'options': ['--layout=reverse', '--info=inline']}), <bang>0)

function! RipgrepFzf(query, fullscreen)
        let command_fmt = 'rg --no-column --line-number --no-heading --color=always --smart-case -- %s || true'
        let initial_command = printf(command_fmt, shellescape(a:query))
        let reload_command = printf(command_fmt, '{q}')
        let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
        call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction

command! -nargs=* -bang Rg call RipgrepFzf(<q-args>, <bang>0)


" dyng/ctrlsf.vim
" .....................

" let g:ctrlsf_auto_preview = 1

let g:ctrlsf_context = '-B 3 -A 3'
let g:ctrlsf_compact_winsize = '30%'
let g:ctrlsf_winsize = '30%'
let g:ctrlsf_auto_focus = { "at" : "start" }

nmap <silent> <leader>fc <Plug>CtrlSFCwordExec
nmap <silent> <leader>fC <Plug>CtrlSFPrompt

" lambdalisue/fern.vim
" .....................

" Disable netrw.
" let g:loaded_netrw  = 1
" let g:loaded_netrwPlugin = 1
" let g:loaded_netrwSettings = 1
" let g:loaded_netrwFileHandlers = 1

" augroup my-fern-hijack
"   autocmd!
"   autocmd BufEnter * ++nested call s:hijack_directory()
" augroup END

" function! s:hijack_directory() abort
"   let path = expand('%:p')
"   if !isdirectory(path)
"     return
"   endif
"   bwipeout %
"   execute printf('Fern %s', fnameescape(path))
" endfunction

" Custom settings and mappings.
" let g:fern#disable_default_mappings = 1

" Use symbols.
" let g:fern#renderer = "nerdfont"

noremap <silent> <Leader>fd :Fern . -drawer -reveal=% -toggle -width=30<CR><C-w>=
" noremap <silent> <Leader>fD <Plug>(fern-action-reveal)
" noremap <silent> <Leader>fd :Fern . -drawer -reveal=% -toggle -width=30<CR><C-w>=

function! s:FernInit() abort
  setlocal nonumber
  setlocal norelativenumber
  nmap <buffer><expr>
        \ <Plug>(fern-my-open-expand-collapse)
        \ fern#smart#leaf(
        \   "\<Plug>(fern-action-open:select)",
        \   "\<Plug>(fern-action-expand)",
        \   "\<Plug>(fern-action-collapse)",
        \ )
  nmap <buffer> <CR> <Plug>(fern-my-open-expand-collapse)<Esc><Bar>:FernDo close<CR>
  nmap <buffer> <2-LeftMouse> <Plug>(fern-my-open-expand-collapse)
  nmap <buffer> n <Plug>(fern-action-new-path)
  nmap <buffer> d <Plug>(fern-action-remove)
  nmap <buffer> m <Plug>(fern-action-move)
  nmap <buffer> M <Plug>(fern-action-rename)
  " nmap <buffer> h <Plug>(fern-action-hidden-toggle)
  nmap <buffer> r <Plug>(fern-action-reload)
  " nmap <buffer> k <Plug>(fern-action-mark)
  " nmap <buffer> K <Plug>(fern-action-mark-children:leaf)
  nmap <buffer> b <Plug>(fern-action-open:split)
  nmap <buffer> v <Plug>(fern-action-open:vsplit)
  nmap <buffer><nowait> < <Plug>(fern-action-leave)
  nmap <buffer><nowait> > <Plug>(fern-action-enter)

  nmap <buffer> <C-l> <C-w><C-l>
  nmap <buffer> <C-h> <C-w><C-h>
  nmap <buffer> <C-k> <C-w><C-k>
  nmap <buffer> <C-j> <C-w><C-j>
  nmap <Leader>l <C-w><C-l>
  nmap <Leader>h <C-w><C-h>
  nmap <Leader>k <C-w><C-k>
  nmap <Leader>j <C-w><C-j>

  " nmap . <Plug>(fern-action-hidden-toggle)
endfunction

augroup FernGroup
  autocmd!
  autocmd FileType fern call s:FernInit()
augroup END

" unblevable/quick-scope
" .....................

" Trigger a highlight in the appropriate direction when pressing these keys.
" let g:qs_highlight_on_keys=['f', 'F', 't', 'T']

" Only underline the highlights instead of using custom colors.
" highlight QuickScopePrimary gui=underline cterm=underline
" highlight QuickScopeSecondary gui=underline cterm=underline

" mhinz/vim-grepper
" .....................

" let g:grepper={}
" let g:grepper.tools=["rg"]

" xmap gr <plug>(GrepperOperator)

" " After searching for text, press this mapping to do a project wide find and
" " replace. It's similar to <leader>r except this one applies to all matches
" " across all files instead of just the current file.
" nnoremap <Leader>R
"   \ :let @s='\<'.expand('<cword>').'\>'<CR>
"   \ :Grepper -cword -noprompt<CR>
"   \ :cfdo %s/<C-r>s//g \| update
"   \<Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left>

" " The same as above except it works with a visual selection.
" xmap <Leader>R
"     \ "sy
"     \ gvgr
"     \ :cfdo %s/<C-r>s//g \| update
"      \<Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left>

" ntpeters/vim-better-whitespace
" .....................

" let g:strip_whitespace_confirm=0
" let g:strip_whitelines_at_eof=1
" let g:strip_whitespace_on_save=1

" Konfekt/FastFold
" .....................

" let g:fastfold_savehook=0
" let g:fastfold_fold_command_suffixes=[]

" junegunn/limelight.vim
" .....................

let g:limelight_conceal_ctermfg=244

" iamcco/markdown-preview.nvim
" .....................

" let g:mkdp_auto_close=0
" let g:mkdp_refresh_slow=1
" let g:mkdp_markdown_css=fnameescape($HOME).'/.local/lib/github-markdown-css/github-markdown.css'

" SirVer/ultisnips
" .....................

" let g:UltiSnipsJumpForwardTrigger="<tab>"
" let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" janko/vim-test
" .....................

" ij has('nvim')
"   let test#strategy='neovim'
" else
"   let test#strategy='vimterminal'
" endif

" let test#python#pytest#executable='docker-compose exec web py.test'

" let test#ruby#rails#executable='docker-compose exec -e RAILS_ENV=test webpacker rails test'

" let test#elixir#exunit#executable='docker-compose exec -e MIX_ENV=test web mix test'
" let test#strategy = 'asyncrun_background'
" let test#strategy='vimterminal'
let test#strategy='dispatch'

nmap <silent> <Leader>tn :TestNearest<CR>
nmap <silent> <Leader>tf :TestFile<CR>
nmap <silent> <Leader>ts :TestSuite<CR>
nmap <silent> <Leader>tl :TestLast<CR>
nmap <silent> <Leader>tv :TestVisit<CR>

" fatih/vim-go
" .....................

let g:go_gopls_enabled = 1 " enable description in command line
let g:go_code_completion_enabled = 0
let g:go_def_mapping_enabled = 0
let g:go_diagnostics_enabled = 0

let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_structs = 1
let g:go_highlight_types = 1

let g:go_auto_type_info = 1


" justinmk/vim-sneak
" .....................

let g:sneak#use_ic_scs = 1
let g:sneak#label = 1

" prabirshrestha/vim-lsp
" .....................

let g:lsp_diagnostics_float_cursor = 1
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_diagnostics_enabled = 1
let g:lsp_preview_float = 1
let g:lsp_hover_conceal = 1
" let g:lsp_preview_autoclose = 1

function! s:on_lsp_buffer_enabled() abort
    " setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gy <plug>(lsp-type-definition)
    nmap <buffer> <leader>er <plug>(lsp-rename)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
    inoremap <buffer> <expr><c-f> lsp#scroll(+4)
    inoremap <buffer> <expr><c-d> lsp#scroll(-4)

    let g:lsp_format_sync_timeout = 1000
    autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
    
    " refer to doc to add more commands
endfunction

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

" liuchengxu/vista.vim
" .....................

let g:vista_sidebar_width = 50
let g:vista_close_on_jump = 1
let g:vista_disable_statusline = 1
let g:vista_highlight_whole_line = 1
let g:vista_executive_for = {
        \ 'go': 'vim_lsp',
        \ 'php': 'vim_lsp',
        \ 'vim': 'vim_lsp',
        \ 'python': 'vim_lsp',
        \ }

noremap <silent> <Leader>fs :Vista!!<CR>

" prabirshrestha/asyncomplete-lsp.vim
"
" autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

" milkypostman/vim-togglelist
" .....................

let g:toggle_list_no_mappings = 1
nnoremap <script> <silent> <leader>c :call ToggleQuickfixList()<CR>
nnoremap <script> <silent> <leader>n :call ToggleLocationList()<CR>

" puremourning/vimspector
" .....................

let g:vimspector_sidebar_width = 60
let g:vimspector_base_dir = expand( '$HOME/.vim/vimspector-config' )
let g:vimspector_sign_priority = {
        \    'vimspectorBP':         998,
        \    'vimspectorBPCond':     997,
        \    'vimspectorBPDisabled': 996,
        \    'vimspectorPC':         999,
        \ }

function! GotoWindow(id)
  :call win_gotoid(a:id)
endfun
function! AddToWatch()
  let word = expand("<cexpr>")
  call vimspector#AddWatch(word)
endfunction

nnoremap <leader>dd :call vimspector#Launch()<CR>
nnoremap <leader>dD :call vimspector#Restart()<CR>
nnoremap <leader>dq :call vimspector#Reset()<CR>

nnoremap <leader>dr :call vimspector#Continue()<CR>
nnoremap <leader>dh :call vimspector#RunToCursor()<CR>
nnoremap <leader>dk :call vimspector#StepOut()<CR>
nnoremap <leader>dj :call vimspector#StepInto()<CR>
nnoremap <leader>dl :call vimspector#StepOver()<CR>

nnoremap <leader>db :call vimspector#ToggleBreakpoint()<CR>
" nnoremap <leader>dB :call vimspector#ToggleConditionalBreakpoint()<CR>
nnoremap <leader>da :call AddToWatch()<CR>
nnoremap <Leader>di <Plug>VimspectorBalloonEval
nnoremap <leader>dx :call vimspector#ClearBreakpoints()<CR>

nnoremap <leader>dc :call GotoWindow(g:vimspector_session_windows.code)<CR>
nnoremap <leader>dv :call GotoWindow(g:vimspector_session_windows.variables)<CR>
nnoremap <leader>dw :call GotoWindow(g:vimspector_session_windows.watches)<CR>
nnoremap <leader>ds :call GotoWindow(g:vimspector_session_windows.stack_trace)<CR>
nnoremap <leader>do :call GotoWindow(g:vimspector_session_windows.output)<CR>

" L-dd  "Debug start"
" L-dD  "Debug restart with the same config"
" L-dq  "Debug Quit"

" L-dr  "Debug Run"
" L-dh  "Debug Here / Run to cursor"
" L-dj  "Debug Into"
" L-dk  "Debug Out"
" L-dl  "Debug Over"

" L-db  "Debug Breakpoint"
" L-da  "Debug Add to watch the symbol"
" L-dx  "Debug clear breakpoints"
" L-di  "Debug Inspect"
        " L-dB  "Debug Conditional Breakpoint"

" L-dc  "Debug Code window"
" L-dv  "Debug Variables window"
" L-dw  "Debug Watch window"
" L-ds  "Debug Stack trace window"
" L-do  "Debug Output window"

" tpope/vim-dispatch
" .....................

" tpope/vim-fugitive
" .....................
nnoremap <Leader>vb :Gblame<CR>
nnoremap <Leader>vd :Gdiffsplit<CR>
nnoremap <Leader>vD :Git difftool<CR>
nnoremap <Leader>vg :Git<CR>

" junegunn/goyo.vim
" .....................
let g:goyo_width = 120

" itchyny/lightline.vim
" mengelbrecht/lightline-bufferline
" .....................
" let g:lightline = {}
" let g:lightline.colorscheme = '16color'
" let g:lightline.colorscheme = 'one'
"

      " \   'left': [ [ 'mode', 'paste' ], [ 'readonly', 'filename', 'modified' ] ]
      "
" let g:lightline.component = {
"     \ 'mode': '%{lightline#mode()}',
"     \ 'absolutepath': '%F',
"     \ 'relativepath': '%f',
"     \ 'filename': '%t',
"     \ 'modified': '%M',
"     \ 'bufnum': '%n',
"     \ 'paste': '%{&paste?"PASTE":""}',
"     \ 'readonly': '%R',
"     \ 'charvalue': '%b',
"     \ 'charvaluehex': '%B',
"     \ 'fileencoding': '%{&fenc!=#""?&fenc:&enc}',
"     \ 'fileformat': '%{&ff}',
"     \ 'filetype': '%{&ft!=#""?&ft:"no ft"}',
"     \ 'percent': '%3p%%',
"     \ 'percentwin': '%P',
"     \ 'spell': '%{&spell?&spelllang:""}',
"     \ 'lineinfo': '%3l:%-2c',
"     \ 'line': '%l',
"     \ 'column': '%c',
"     \ 'close': '%999X X ',
"     \ 'winnr': '%{winnr()}' }
" autocmd BufWritePost,TextChanged,TextChangedI * call lightline#update()

let g:lightline = {}
let g:lightline.colorscheme = 'gruvbox'
let g:lightline.colorscheme = 'gruvbit'
" let g:lightline.subseparator = { 'left': '◇', 'right': '◇' }
let g:lightline.subseparator = { 'left': '│', 'right': '│'}
let g:lightline.active = {}
let g:lightline.active.left = [ [ 'mode', 'paste' ], [ 'relativepath' ], [ 'line', 'readonly', 'modified' ] ]
let g:lightline.active.right = [ [ 'gitbranch' ] ]
" let g:lightline.active.right = [ [ 'functionName', 'gitbranch' ] ]
let g:lightline.inactive = {}
let g:lightline.inactive.left = [ [ 'relativepath' ], [ 'line', 'readonly', 'modified' ] ]
let g:lightline.inactive.right = [ [ 'gitbranch' ] ]
let g:lightline.tabline = {}
let g:lightline.tabline.left = [ ['buffers'] ]
let g:lightline.tabline.right = [ ['close'] ]
let g:lightline.tabline.right = [ ]
let g:lightline.component_expand = {}
let g:lightline.component_expand.buffers = 'lightline#bufferline#buffers'
" let g:lightline.component_expand.functionName = 'NearestMethodOrFunction'
let g:lightline.component_function = {}
let g:lightline.component_function.gitbranch = 'FugitiveHead'
let g:lightline.component_type = {}
let g:lightline.component_type.buffers = 'tabsel'

autocmd BufWritePost,TextChanged,TextChangedI * call lightline#update()

nnoremap <Leader>1 :call lightline#bufferline#go(1)<cr>
nnoremap <Leader>2 :call lightline#bufferline#go(2)<cr>
nnoremap <Leader>3 :call lightline#bufferline#go(3)<cr>
nnoremap <Leader>4 :call lightline#bufferline#go(4)<cr>
nnoremap <Leader>5 :call lightline#bufferline#go(5)<cr>
nnoremap <Leader>6 :call lightline#bufferline#go(6)<cr>
nnoremap <Leader>7 :call lightline#bufferline#go(7)<cr>
nnoremap <Leader>8 :call lightline#bufferline#go(8)<cr>
nnoremap <Leader>9 :call lightline#bufferline#go(9)<cr>
nnoremap <Leader>0 :call lightline#bufferline#go(10)<cr>
nnoremap <Leader>[ :bprevious<cr>
nnoremap <Leader>] :bnext<cr>

set noshowmode
set showtabline=2

let g:lightline#bufferline#filename_modifier = ':.'
let g:lightline#bufferline#show_number = 2
let g:lightline#bufferline#number_map = {
\ 0: '⁰', 1: '¹', 2: '²', 3: '³', 4: '⁴',
\ 5: '⁵', 6: '⁶', 7: '⁷', 8: '⁸', 9: '⁹'}

" let s:p.normal.left = [ ['#0000ff', '#ffffff', 21, 231, 'bold' ], [ '#ffffff', '#0000ff', 231, 21 ] ]
" let g:lightline#colorscheme#landscape#palette = s:p

" prabirshrestha/asyncomplete-lsp.vim
" ---
let g:asyncomplete_auto_popup       = 1
let g:asyncomplete_auto_completeopt = 0

autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif
inoremap <expr> <Tab>   pumvisible() ? "<C-n>" : "<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "<C-p>" : "<S-Tab>"
inoremap <expr> <Cr>    pumvisible() ? "<C-y>" : "<Cr>"



function! s:init_lynx()
  nnoremap <nowait><buffer> <C-F> i<PageDown><C-\><C-N>
  tnoremap <nowait><buffer> <C-F> <PageDown>

  nnoremap <nowait><buffer> <C-B> i<PageUp><C-\><C-N>
  tnoremap <nowait><buffer> <C-B> <PageUp>

  nnoremap <nowait><buffer> <C-D> i:DOWN_HALF<CR><C-\><C-N>
  tnoremap <nowait><buffer> <C-D> :DOWN_HALF<CR>

  nnoremap <nowait><buffer> <C-U> i:UP_HALF<CR><C-\><C-N>
  tnoremap <nowait><buffer> <C-U> :UP_HALF<CR>

  nnoremap <nowait><buffer> <C-N> i<Delete><C-\><C-N>
  tnoremap <nowait><buffer> <C-N> <Delete>

  nnoremap <nowait><buffer> <C-P> i<Insert><C-\><C-N>
  tnoremap <nowait><buffer> <C-P> <Insert>

  nnoremap <nowait><buffer> u     i<Left><C-\><C-N>
  nnoremap <nowait><buffer> U     i<C-U><C-\><C-N>
  nnoremap <nowait><buffer> <CR>  i<CR><C-\><C-N>
  nnoremap <nowait><buffer> gg    i:HOME<CR><C-\><C-N>
  nnoremap <nowait><buffer> G     i:END<CR><C-\><C-N>
  nnoremap <nowait><buffer> zl    i:SHIFT_LEFT<CR><C-\><C-N>
  nnoremap <nowait><buffer> zL    i:SHIFT_LEFT<CR><C-\><C-N>
  nnoremap <nowait><buffer> zr    i:SHIFT_RIGHT<CR><C-\><C-N>
  nnoremap <nowait><buffer> zR    i:SHIFT_RIGHT<CR><C-\><C-N>
  nnoremap <nowait><buffer> gh    i:HELP<CR><C-\><C-N>
  nnoremap <nowait><buffer> cow   i:LINEWRAP_TOGGLE<CR><C-\><C-N>

  tnoremap <buffer> <C-C> <C-G><C-\><C-N>
  nnoremap <buffer> <C-C> i<C-G><C-\><C-N>
endfunction
command! -nargs=1 Web       vnew|call term_start('lynx -scrollbar '.shellescape(substitute(<q-args>,'#','%23','g')))|call <SID>init_lynx()
command! -nargs=1 Websearch vnew|call term_start('lynx -scrollbar https://duckduckgo.com/?q='.shellescape(substitute(<q-args>,'#','%23','g')))|call <SID>init_lynx()


" vim:foldmethod=marker
